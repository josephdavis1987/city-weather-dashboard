---
title: "City Weather Analysis"
format: html
jupyter: python3
execute:
  echo: true
  warning: false
params:
  city: "Chattanooga"   # ← change to any city in Southeast_US_Cities.csv
  frac: 0.11            # ← change smoothing span here
---

```{python}

try:
    params
except NameError:
    class P: pass
    params = P()
    params.city = "Chattanooga"
    params.frac = 0.11

```

```{python}

# 0) Imports & Connection
import numpy as np
import pandas as pd
import duckdb
import plotly.graph_objects as go
from statsmodels.nonparametric.smoothers_lowess import lowess

con = duckdb.connect("../data/weather.duckdb")


# 1) Cyclic LOESS helper (unchanged)
def loess_cyclic(x, y, frac=0.1):
    x = np.asarray(x); y = np.asarray(y)
    n = len(x); k = max(int(frac * n), 1)
    x_ext = np.concatenate((x[-k:] - n, x, x[:k] + n))
    y_ext = np.concatenate((y[-k:], y, y[:k]))
    sm_ext = lowess(y_ext, x_ext, frac=frac)
    return sm_ext[k:k+n, 1]


# 2) Load & filter by city param
city = params.city
df = con.execute(f"""
    SELECT *
    FROM daily_weather
    WHERE city = '{city}'
""").fetchdf()

# convert types & units
df['date'] = pd.to_datetime(df['date'])
df[['t','tmax','tmin']] = df[['t','tmax','tmin']] * 9/5 + 32


```


```{python}

# 3) Build day_of_year + month_day
df['day_of_year'] = df['date'].dt.dayofyear
df['month_day'] = df['date'].dt.strftime('%b-%d')  # e.g. "Jan-01"

# 4) Aggregate raw & LOESS
agg = (
    df.groupby(['day_of_year','month_day'])
      .agg(
        avg_min=('tmin','mean'),
        avg_max=('tmax','mean'),
        min_t=('tmin','min'),
        max_t=('tmax','max'),
      )
      .reset_index()
)

# apply cyclic LOESS
frac = params.frac
agg['low_loess']  = loess_cyclic(agg['day_of_year'], agg['avg_min'],  frac=frac)
agg['high_loess'] = loess_cyclic(agg['day_of_year'], agg['avg_max'], frac=frac)

```


```{python}

# 5) Plot: ribbon + LOESS + nice month ticks
first_of_month = [pd.to_datetime(f'2000-{m:02d}-01').strftime('%b-%d') 
                  for m in range(1,13)]

fig = go.Figure()

# raw envelope
fig.add_trace(go.Scatter(
    x=agg.month_day, y=agg.min_t,
    mode='lines', line_color='rgba(0,0,0,0)', showlegend=False
))
fig.add_trace(go.Scatter(
    x=agg.month_day, y=agg.max_t,
    mode='lines', fill='tonexty',
    fillcolor='rgba(72,168,216,0.3)', line_color='rgba(0,0,0,0)',
    name=f"{city} raw range"
))

# LOESS-smoothed bounds
fig.add_trace(go.Scatter(
    x=agg.month_day, y=agg.low_loess,
    mode='lines', line=dict(color='firebrick', dash='dash'),
    name=f"Avg Low (LOESS, frac={frac})"
))
fig.add_trace(go.Scatter(
    x=agg.month_day, y=agg.high_loess,
    mode='lines', line=dict(color='darkblue', dash='dash'),
    name=f"Avg High (LOESS, frac={frac})"
))

fig.update_layout(
    title=f"{city}: Avg Temp by Day of Year (°F)",
    xaxis=dict(
      title="Month-Day",
      type="category",
      tickmode="array",
      tickvals=first_of_month,
      ticktext=first_of_month,
      tickangle=-45
    ),
    yaxis_title="Temperature (°F)",
    height=450
)


fig.show()

```